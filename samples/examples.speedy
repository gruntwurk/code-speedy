[listBuiltinCommands]
description:
	A macro that helps with creating other macros.
	This fetches a list of all registered commands that do not take any arguments
	(which means they can be assigned keyboard shortcuts.)
	The list is inserted in to a new file that you can edit/save.
command:
	workbench.action.files.newUntitledFile
js:
	// Since getCommands() only returns a Promise for a string[], we have to use the then()
	// method to register a callback function which will be called once the promise is fullfilled.
	const SUPPRESS_INTERNAL = true;
	vscode.commands.getCommands(SUPPRESS_INTERNAL).then(resolvedvalue => {
		var fullText = resolvedvalue.join('\n');
		var editor = window.activeTextEditor;
		var cursorPos = editor.selection.start;
		editor.edit(eb => {eb.insert(cursorPos,
	 	'= VS Code Commands\n\nThe following are all of the VS Code commands that do not take any\narguments (which means they can be assigned keyboard shortcuts.)\n\n' +
	 	'NOTE: See also https://code.visualstudio.com/api/references/commands\nfor the commands that do take arguments.\n\n' +
		fullText)});
	});



[openNewTerminal]
desc:
	Opens a new terminal and sends a command to it.
	(This is different than using the shellscript action, in that what's done in this macro is visible to the user.)
cmd:
	 workbench.action.terminal.new
vars:
	$currentFile = window.activeTextEditor.document.uri.fsPath
	$currentFolder = vscode.workspace.rootPath
command:
	workbench.action.terminal.sendSequence
	text = "echo the current file is: $currentFile\necho the current folder is: $currentFolder\n"



[userInputViaJavascript]
Desc:
	Demonstrates how VS Code works when you invoke showInputBox() and showInformationMessage().
javascript:
	let response = await window.showInputBox()
	window.showInformationMessage(`You entered: ${response}`)



[clipCurrentWord]
description:
    Copies the word under the cursor to the clipboard
    (without affecting the cursor/selection).
js:
	const doc = window.activeTextEditor.document
	let cursorPos = window.activeTextEditor.selection.start)
	let word = doc.getText(doc.getWordRangeAtPosition(cursorPos))
	(TBD push the word into the clipboard)



[shellExample]
description:
	Example of running a shell script in the background.
	IMPORTANT: don't start a shell command here that doesn't finish!
	There's no good way of killing/canceling it.
	(Yes, the echo will never be seen.)
vars:
	$currentFolder = vscode.workspace.rootPath
shell: cd \"$currentFolder\"
	touch .gitignore
	echo hello



[invokeSomeNamedSnippet]
desc:
	Demonstrates invoking a pre-defined snippet by its prefix.
command:
	type
	"mySnippetPrefixHere"
command:
	insertSnippet



