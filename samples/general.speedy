[listBuiltinCommands]
description:
	A macro that helps with creating other macros.
	This fetches a list of all registered commands that do not take any arguments
	(which means they can be assigned keyboard shortcuts.)
	The list is inserted in to a new file that you can edit/save.
command:
	workbench.action.files.newUntitledFile
js:
	// Since getCommands() only returns a Promise for a string[], we have to use the then()
	// method to register a callback function which will be called once the promise is fullfilled.
	const SUPPRESS_INTERNAL = true;
	vscode.commands.getCommands(SUPPRESS_INTERNAL).then(resolvedvalue => {
		var fullText = resolvedvalue.join('\n');
		var editor = window.activeTextEditor;
		var cursorPos = editor.selection.start;
		editor.edit(eb => {eb.insert(cursorPos,
	 	'= VS Code Commands\n\nThe following are all of the VS Code commands that do not take any\narguments (which means they can be assigned keyboard shortcuts.)\n\n' +
	 	'NOTE: See also https://code.visualstudio.com/api/references/commands\nfor the commands that do take arguments.\n\n' +
		fullText)});
	});


[unMultiSelectLast]
description:
	For when you Ctrl-Click to multiselect 10 times and on the eleventh get it wrong.
	Just press Ctrl-0 (or whatever key you assign) to unselect the eleventh, then carry on.
	(See also, https://github.com/danseethaler/vscode-tab-through-selections, for more along this line.)
javascript:
	const editor = window.activeTextEditor;
	const newSelections = editor.selections.slice(0, editor.selections.length - 1);
	editor.selections = newSelections;


[transformToSnake]
description:
	A multi-select friendly macro to convert from CamelCase to snake_case.
	If any particular selection is empty (just a cursor), this will automatically expand it to the whole word first.
	(Kudos to https://stackoverflow.com/users/398630/brainslugs83 for some pointers)
javascript:
	let editor = window.activeTextEditor;
	speedy.expandAllSelectionsToWords();
	doTransform(0);
	function doTransform(i) {
	  let sels = editor.selections;
	  if (i < 0 || i >= sels.length) { return; }
	  let sel = sels[i];
	  let snake = speedy.snakeCase(editor.document.getText(sel));
	  editor.edit(eb => {eb.replace(sel, snake)}).then(x => {
	    doTransform(i+1);
	  });
	}



[transformToCamel]
description:
	Same as transformToSnake, but vice versa.
javascript:
	let editor = window.activeTextEditor;
	speedy.expandAllSelectionsToWords();
	doTransform(0);
	function doTransform(i) {
	  let sels = editor.selections;
	  if (i < 0 || i >= sels.length) { return; }
	  let sel = sels[i];
	  let camel = speedy.camelCase(editor.document.getText(sel));
	  editor.edit(eb => {eb.replace(sel, camel)}).then(x => {
	    doTransform(i+1);
	  });
	}


